name: Generate iFlow Documentation

on:
  # Trigger manually or via repository_dispatch
  workflow_dispatch:
  repository_dispatch:
    types: [generate-iflow-doc]

jobs:
  generate_doc:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout repository
      - name: 🧩 Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false  # Use token explicitly for push

      # 2️⃣ Set up Python
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3️⃣ Install dependencies
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # fallback: install common dependencies if requirements.txt is missing
          pip install urllib3 openai requests || true

      # 4️⃣ Run the document generation script
      - name: 🧠 Generate iFlow Technical Document
        run: python Dynamic_generate_iflow_spec_using_ai.py

      # 5️⃣ Commit and push generated .docx back to repo
      - name: 🪶 Commit and push generated document
        env:
          GITHUB_TOKEN: ${{ secrets.PYTHON_REPO_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Add any .docx file generated in repo root
          git add *.docx || true

          # Commit only if there are changes
          if ! git diff --cached --quiet; then
            git commit -m "📄 Auto-generated iFlow Technical Documentation"
            git push https://x-access-token:${PYTHON_REPO_TOKEN}@github.com/${{ github.repository }} HEAD:${{ github.ref }}
          else
            echo "No changes detected — skipping commit."
